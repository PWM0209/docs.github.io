(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{217:function(a,n,t){"use strict";t.r(n);var v=t(0),_=Object(v.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"正则小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则小结"}},[a._v("#")]),a._v(" 正则小结")]),a._v(" "),t("h2",{attrs:{id:"示意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示意"}},[a._v("#")]),a._v(" 示意")]),a._v(" "),t("p",[a._v("1 "),t("code",[a._v("\\")]),a._v("\n斜杠用于转义，在js正则里，只有一些元字符("),t("code",[a._v("*,?,.")]),a._v("等)和"),t("code",[a._v("\\")]),a._v("本身需要转义，其他的不需要转义\n如果其他的字符前面使用了"),t("code",[a._v("\\")]),a._v("，可能会产生负面影响，比如"),t("code",[a._v("\\b")]),a._v("，"),t("code",[a._v("\\t")]),a._v("这些有特殊含义的转义。\n此外，在js正则中，\\还有一个用处在于使用"),t("code",[a._v("new RegExp()")]),a._v("形式创建正则对象时\n比如"),t("code",[a._v("new RegExp('a\\*a')")]),a._v(",其中"),t("code",[a._v("*")]),a._v("是乘以的意思，js引擎在解析该正则表达式字符串时，会消耗掉这个斜杠\n最后生成的是"),t("code",[a._v("a*a")]),a._v("，这时候我们要这样写"),t("code",[a._v("'a\\\\*a'")]),a._v("。")]),a._v(" "),t("p",[a._v("2 "),t("code",[a._v("^")]),a._v("\n该元字符比较简单，就是表示该正则是从字符串的首字符开始匹配的\n有一个地方需要注意的是，如果该正则表达式加了m标记时，匹配到了行分隔符的时候就会结束\n然后会在下一行继续匹配。\n"),t("code",[a._v("'d\\nd'.match(/^d/g) => ['d'], 'd\\nd'.match(/^d/mg) => [\"d\", \"d\"]")])]),a._v(" "),t("p",[a._v("3 "),t("code",[a._v("$")]),a._v("\n该元字符和^一样，当含义$的正则匹配一个字符串时，他不是直接判断该字符串的结尾\n而是以行结束符为分隔，对每一行的结尾进行匹配\n"),t("code",[a._v("'d\\nd'.match(/d$/g) => ['d'], 'd\\nd'.match(/d$/mg) = > [\"d\", \"d\"]")])]),a._v(" "),t("p",[a._v("4 "),t("code",[a._v("* + ?")]),a._v("\n这三个元字符代表的是匹配0到多个同样的字符组合\n"),t("code",[a._v("a*")]),a._v(","),t("code",[a._v("a?")]),a._v(","),t("code",[a._v("a+")]),a._v(",分别代表匹配0到多个a，0到1个a,1到多个a\n这是一种贪婪的匹配，也就是尽可能多地匹配后面符合条件的字符\n如果在这些元字符后面加上?，那么就代表是非贪婪匹配，也就是尽可能少地匹配\n"),t("code",[a._v("{n,m}")]),a._v("和以上的情况类似，也可以在后面加"),t("code",[a._v("?")]),a._v(" "),t("code",[a._v("'ddd'.match(/d{1,11}/) => ddd, 'ddd'.match(/d{1,11}?/) => d")])]),a._v(" "),t("p",[a._v("5 "),t("code",[a._v(".")]),a._v("\n匹配除了行分隔符外的所有字符")]),a._v(" "),t("p",[a._v("6 捕获分组"),t("code",[a._v("(x)")]),a._v(" "),t("code",[a._v("\\n")]),a._v(" "),t("code",[a._v("$n")]),a._v(" "),t("code",[a._v("RegExp.$n")]),a._v(" "),t("code",[a._v("()")]),a._v("代表捕获分组，"),t("code",[a._v("x")]),a._v("代表的表达式所匹配的内容可以在x所有的正则中或者其他地方使用")]),a._v(" "),t("p",[t("code",[a._v("/(x)(y)\\1\\2/.test('xyxy') => true /(x)(y)\\1\\2/.test('xyyy') => false")]),a._v(" "),t("code",[a._v("\\n")]),a._v("代表的是第n个捕获分组的值")]),a._v(" "),t("p",[t("code",[a._v("'xy'.replace(/(x)(y)/, \"$1 and $2 \") => x and y, RegExp.$1 = x, RegExp.$2 = y")]),a._v("\n每次正则执行完后，捕获分组或挂载到RegExp对象上，并且清除上次执行的结果\n"),t("code",[a._v("$&")]),a._v("是一个特殊的变量，他代表是整个正则表达式匹配到的结果。也就是xy")]),a._v(" "),t("p",[a._v("7 "),t("code",[a._v("(?:x)")]),a._v("\n非捕获分组，也就是()中的表达式捕获到分组不可在其他地方使用\n"),t("code",[a._v('\'x\'.replace(/(?:x)/, "$1") => "$1"')])]),a._v(" "),t("p",[a._v("8 "),t("code",[a._v("x(?=y)")]),a._v("\n前向断言，断言x后面是y,但y不在捕获分组中\n"),t("code",[a._v("'x'.match(/x(?=y+)/) => null, 'xyy'.match(/x(?=y+)/) => x")])]),a._v(" "),t("p",[a._v("9 "),t("code",[a._v("x(?!y)")]),a._v("\n同上，断言x后面不是y。")]),a._v(" "),t("p",[a._v("10 "),t("code",[a._v("[\\b]")]),a._v("\n匹配(U+0008)，键盘中的退格键。")]),a._v(" "),t("p",[a._v("11 "),t("code",[a._v("\\b")]),a._v("\n匹配单词的边界，如果匹配成功，匹配到内容的结果长度为0\n单词边界的定义为，某一个位置，后面或者前面没有单词字符，则是单词边界\n其中单词字符的定义为"),t("code",[a._v("大小写字母")]),a._v("+"),t("code",[a._v("数字")]),a._v("+"),t("code",[a._v("_")]),a._v("\n其余的都为非单词字符\n"),t("code",[a._v("/a\\b/.test('a~b') => true")]),a._v(","),t("code",[a._v("~")]),a._v("被视为单词边界。"),t("code",[a._v("/a\\b/.test('ab') => false")])]),a._v(" "),t("p",[a._v("12 "),t("code",[a._v("\\B")]),a._v("\n分单词边界，定义类似"),t("code",[a._v("\\b")]),a._v("。"),t("code",[a._v("/a\\B/.test('ab') => true, /b\\B/.test('ab') => false")]),a._v("\nb的后面是''，属于单词边界，所以是false")]),a._v(" "),t("p",[a._v("13 "),t("code",[a._v("\\w")]),a._v("\n单词字符，定义为"),t("code",[a._v("[A-Za-z0-9_]")])]),a._v(" "),t("p",[a._v("14 "),t("code",[a._v("\\W")]),a._v("\n非单词字符，定义为"),t("code",[a._v("[^A-Za-z0-9_]")])]),a._v(" "),t("p",[a._v("15 "),t("code",[a._v("\\s")]),a._v("\n所有空格，如制表符、垂直分隔符、水平分隔符，定义为:\n"),t("code",[a._v("[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])]),a._v(" "),t("p",[a._v("16 "),t("code",[a._v("\\S")]),a._v("\n非空格符，定义为:\n"),t("code",[a._v("[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])]),a._v(" "),t("p",[a._v("17 sticky\n粘着位类似于全局匹配，当我们使用exec函数时，如果正则表达式中加了g\n那么就会下次执行exec函数时就会从上次匹配的结束位置开始\n同样，我们可以通过加y标记来达到这个目的")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/a/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// lastIndex为上次匹配的位置，lastIndex为不会变，每次都匹配到第一个a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/a/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// lastIndex会变，第n次匹配会匹配到第n个a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/a/y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// lastIndex会变，第n次匹配会匹配到第n个a,粘着位其实就是说上次匹配的位置会粘着（记着）")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("18 使用"),t("code",[a._v("new RegExp()")]),a._v("\n动态生成正则时需要使用这种方式，但是需要对输入进行转义。需要对元字符进行修正，$&为每次匹配到的字符")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("fix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("replace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/[.*+?^${}()|[\\]\\\\]/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'\\\\$&'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),t("h3",{attrs:{id:"匹配数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配数字"}},[a._v("#")]),a._v(" 匹配数字")]),a._v(" "),t("p",[a._v("1 数字：\n"),t("code",[a._v("^[0-9]*$")])]),a._v(" "),t("p",[a._v("2 n位的数字：\n"),t("code",[a._v("^\\d{n}$")])]),a._v(" "),t("p",[a._v("3 至少n位的数字：\n"),t("code",[a._v("^\\d{n,}$")])]),a._v(" "),t("p",[a._v("4 m-n位的数字：\n"),t("code",[a._v("^\\d{m,n}$")])]),a._v(" "),t("p",[a._v("5 零和非零开头的数字：\n"),t("code",[a._v("^(0|[1-9][0-9]*)$")])]),a._v(" "),t("p",[a._v("6 非零开头的最多带两位小数的数字：\n"),t("code",[a._v("^([1-9][0-9]*)+(.[0-9]{1,2})?$")])]),a._v(" "),t("p",[a._v("7 带1-2位小数的正数或负数：\n"),t("code",[a._v("^(\\-)?\\d+(\\.\\d{1,2})?$")])]),a._v(" "),t("p",[a._v("8 正数、负数、和小数：\n"),t("code",[a._v("^(\\-|\\+)?\\d+(\\.\\d+)?$")])]),a._v(" "),t("p",[a._v("9 有两位小数的正实数：\n"),t("code",[a._v("^[0-9]+(.[0-9]{2})?$")])]),a._v(" "),t("p",[a._v("10 有1~3位小数的正实数：\n"),t("code",[a._v("^[0-9]+(.[0-9]{1,3})?$")])]),a._v(" "),t("p",[a._v("11 非零的正整数：\n"),t("code",[a._v("^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$")])]),a._v(" "),t("p",[a._v("12 非零的负整数：\n"),t("code",[a._v('^\\-[1-9][]0-9"*$ 或 ^-[1-9]\\d*$')])]),a._v(" "),t("p",[a._v("13 非负整数：\n"),t("code",[a._v("^\\d+$ 或 ^[1-9]\\d*|0$")])]),a._v(" "),t("p",[a._v("14 非正整数：\n"),t("code",[a._v("^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$")])]),a._v(" "),t("p",[a._v("15 非负浮点数：\n"),t("code",[a._v("^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$")])]),a._v(" "),t("p",[a._v("16 非正浮点数：\n"),t("code",[a._v("^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$")])]),a._v(" "),t("p",[a._v("17 正浮点数：\n"),t("code",[a._v("^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$")])]),a._v(" "),t("p",[a._v("18 负浮点数：\n"),t("code",[a._v("^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$")])]),a._v(" "),t("p",[a._v("19 浮点数：\n"),t("code",[a._v("^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$")])]),a._v(" "),t("h3",{attrs:{id:"校验字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#校验字符"}},[a._v("#")]),a._v(" 校验字符")]),a._v(" "),t("p",[a._v("1 汉字：\n"),t("code",[a._v("^[\\u4e00-\\u9fa5]{0,}$")])]),a._v(" "),t("p",[a._v("2 英文和数字：\n"),t("code",[a._v("^[A-Za-z0-9]+$")]),a._v(" 或 "),t("code",[a._v("^[A-Za-z0-9]{4,40}$")])]),a._v(" "),t("p",[a._v("3 长度为3-20的所有字符：\n"),t("code",[a._v("^.{3,20}$")])]),a._v(" "),t("p",[a._v("4 由26个英文字母组成的字符串：\n"),t("code",[a._v("^[A-Za-z]+$")])]),a._v(" "),t("p",[a._v("5 由26个大写英文字母组成的字符串：\n"),t("code",[a._v("^[A-Z]+$")])]),a._v(" "),t("p",[a._v("6 由26个小写英文字母组成的字符串：\n"),t("code",[a._v("^[a-z]+$")])]),a._v(" "),t("p",[a._v("7 由数字和26个英文字母组成的字符串：\n"),t("code",[a._v("^[A-Za-z0-9]+$")])]),a._v(" "),t("p",[a._v("8 由数字、26个英文字母或者下划线组成的字符串：\n"),t("code",[a._v("^\\w+$ 或 ^\\w{3,20}$")])]),a._v(" "),t("p",[a._v("9 中文、英文、数字包括下划线：\n"),t("code",[a._v("^[\\u4E00-\\u9FA5A-Za-z0-9_]+$")])]),a._v(" "),t("p",[a._v("10 中文、英文、数字但不包括下划线等符号：\n"),t("code",[a._v("^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$")])]),a._v(" "),t("p",[a._v("11 可以输入含有^%&',;=?$\"等字符：\n"),t("code",[a._v("[^%&',;=?$\\x22]+")])]),a._v(" "),t("p",[a._v("12 禁止输入含有~的字符：\n"),t("code",[a._v("[^~\\x22]+")])]),a._v(" "),t("h3",{attrs:{id:"特殊需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊需求"}},[a._v("#")]),a._v(" 特殊需求")]),a._v(" "),t("p",[a._v("1 Email地址：\n"),t("code",[a._v("^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$")])]),a._v(" "),t("p",[a._v("2 域名：\n"),t("code",[a._v("[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?")])]),a._v(" "),t("p",[a._v("3 InternetURL：\n"),t("code",[a._v("[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$")])]),a._v(" "),t("p",[a._v("4 手机号码最新：\n"),t("code",[a._v("^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\\d{8}$")])]),a._v(" "),t("p",[a._v('5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：\n'),t("code",[a._v("^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$")])]),a._v(" "),t("p",[a._v("6 国内电话号码(0511-4405222、021-87888822)：\n"),t("code",[a._v("\\d{3}-\\d{8}|\\d{4}-\\d{7}")])]),a._v(" "),t("p",[a._v("7 身份证号(15位、18位数字)：\n"),t("code",[a._v("^\\d{15}|\\d{18}$")])]),a._v(" "),t("p",[a._v("8 短身份证号码(数字、字母x结尾)：\n"),t("code",[a._v("^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$")])]),a._v(" "),t("p",[a._v("9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：\n"),t("code",[a._v("^[a-zA-Z][a-zA-Z0-9_]{4,15}$")])]),a._v(" "),t("p",[a._v("10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：\n"),t("code",[a._v("^[a-zA-Z]\\w{5,17}$")])]),a._v(" "),t("p",[a._v("11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n"),t("code",[a._v("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$")])]),a._v(" "),t("p",[a._v("12 日期格式：\n"),t("code",[a._v("^\\d{4}-\\d{1,2}-\\d{1,2}")])]),a._v(" "),t("p",[a._v("13 一年的12个月(01～09和1～12)：\n"),t("code",[a._v("^(0?[1-9]|1[0-2])$")])]),a._v(" "),t("p",[a._v("14 一个月的31天(01～09和1～31)：\n"),t("code",[a._v("^((0?[1-9])|((1|2)[0-9])|30|31)$")])])])}),[],!1,null,null,null);n.default=_.exports}}]);